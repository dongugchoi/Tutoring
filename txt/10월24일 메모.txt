JPA는 자바에서 데이터베이스와 쉽게 소통해주는 도구
JPA를 사용하면 자바객체를 데이터베이스에 쉽게 저장할수있다.
JPA를 사용하면 데이터베이스에서 원하는 정보를 쉽게 꺼낼 수 있다.
JPA는 복잡한 SQL 코드 없이도 데이터를 쉽게 다룰 수 있게 해준다.

HashMap<key type,value type> <변수명> = new HashMap<>();
키와 값으로 저장하는 형태
<>연산자는 왼쪽의 변수를 지정하는 타입을 자동으로 오른쪽도 타입지정을 해준다.
추가 = <변수명>.put("key값", "value값")
조회 = System.out.println(<변수명>.get("key"));


@GenericGenerator(name="system-uuid", strategy="uuid")
	private String id; //이 객체의 id


→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
주요 방법들 5가지
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
GenerationType.AUTO:
JPA가 데이터베이스에 따라 적절한 기본 키 생성 전략을 자동으로 선택합니다.
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
GenerationType.IDENTITY:
데이터베이스가 자동으로 증가하는 값을 사용하여 기본 키를 생성합니다. 
일반적으로 MySQL의 AUTO_INCREMENT와 같은 기능입니다.
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
GenerationType.SEQUENCE:
데이터베이스의 시퀀스를 사용하여 기본 키를 생성합니다. 
주로 Oracle 같은 데이터베이스에서 사용됩니다.
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
GenerationType.TABLE:
별도의 테이블을 만들어 기본 키 값을 관리합니다.
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→
uuid (자주 사용되는 사용자 정의 전략):
UUID를 생성하기 위한 사용자 정의 전략으로, 고유한 식별자를 생성합니다.
→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→→

@GenericGenerator 어노테이션은
기본 키를 생성하기 위한 알고리즘이나 전략을 사용자 정의할 수 있다.
name 속성 = 생성기의 이름을 정의한다.
strategy = 기본키를생성할때 어떤방법을 사용할지 지정하는방법

@GeneratedValue 어노테이션은
JPA에서 엔티티의 기본 키를 자동으로 생성하도록 지정한다.

＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃
TodoRepository 클래스
@Repository 어노테이션은
해당 인터페이스가 데이터 액세스 계층이며 스프링이 이 인터페이스를
스프링 빈으로 등록하게되어 다른 빈을 필요로 할 때 자동으로 필요한 빈을 주입함

public interface TodoRepository extends JpaRepository<TodoEntity, String>
여기서 JpaRepository는 JPA에서 제공하는 인터페이스이며 기본적으로
CRUD 메서드 기능이있고 더 많은 기능을 자동으로 제공한다.

JpaRepository의 주요 메서드
save(S entity) : 엔티티를 데이터베이스에 저장하거나 업데이트한다.
findById(ID id): 기본 키를 이용하여 엔티티를 조회한다.
findAll(): 데이터베이스의 모든 엔티티를 조회한다.
deleteById(ID id): 기본 키를 이용하여 엔티티를 삭제한다.

@Slf4j
로깅을 쉽게 할 수 있게 도와주는 도구
*로깅이란?
프로그램이 실행 될 때 어떤 일이 일어났는지 기록하는 것 예를 들어 에러발생내용
@Slf4j가 없어도 로깅을 할 수 있지만 나중에 로깅 방법을 바꾸고 싶을 때 코드를
많이 수정하지 않고 쉽게 바꿀 수 있다.